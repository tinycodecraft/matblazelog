
<div class="mdc-layout-grid__cell--span-4-phone mdc-layout-grid__cell--span-@(GetTablet())-tablet mdc-layout-grid__cell--span-@(GetDesktop())-desktop" @attributes="@CapturedAttributes">
    @ChildContent
</div>
@code{
    [Parameter]
    /*Please note that ChildContent name is implicit Template Tag, such that using only component name tag to wrap the child content is sufficient
     * 
     * otherwise name as "ChildContent" <TemplateTag></TemplateTag> needs to be stated for passing the content 
     * we can also provide argument to Template Parameter ,with type like RenderFragment<TItem>, for example, we use Context Parameter to define variable used 
     * within the Content of TemplateTag, i.e. <TemplateTag Context="item">{...item...}</TemplateTag>
     * if variable name not provided , @context will be assumed.
     * for avoiding messing the order and re-render the collection, @key="@item" attribute can be added to most outer element of template content */
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public int Consume { get; set; } = 4;

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> CapturedAttributes { get; set; }

    private int GetTablet()
    {
        switch(Consume)
        {
            case 1:
                return 2;
            case 2:
                return 8;
            case 3:
                return 6;
            case 4:
                return 8;
            default:
                return 8;

        }

    }
    private int GetDesktop()
    {
        switch (Consume)
        {
            case 1:
                return 3;
            case 2:
                return 6;
            case 3:
                return 9;
            case 4:
                return 12;
            default:
                return 12;

        }

    }
}